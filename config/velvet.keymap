#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define SYM 1
#define NAV 2

/ {
    behaviors {
        l_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9>;
        };

        r_pht: right_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  Q  |  W  |  F   |  P   |  B   |    |  J   |  L   |  U  |  Y  |  '  |
            // |  A  |  R  |  S   |  T   |  G   |    |  M   |  N   |  E  |  I  |  O  |
            // |  Z  |  X  |  C   |  D   |  V   |    |  K   |  H   |  ,  |  .  |  /  |
            //       | TAB |  `   |  ESC | Enter|    | space| BSPC |  [  |  '  |

            bindings = <
&kp Q            &kp W           &kp E             &kp R           &kp T        &kp Y      &kp U           &kp I             &kp O           &kp P
&mt LCTRL A      &mt LALT S      &mt LSHIFT D      &mt LGUI F      &kp G        &kp H      &mt LGUI J      &mt LSHIFT K      &mt LALT L      &mt LCTRL SEMI
&kp Z            &kp X           &kp C             &kp V           &kp B        &kp N      &kp M           &kp COMMA         &kp DOT         &kp FSLH
                 &kp TAB         &kp GRAVE         &lt 2 ESC       &kp ENTER    &kp SPACE  &lt SYM BSPC    &kp LBKT          &kp SQT
            >;
        };

        SYM {
            bindings = <
&kp EXCL   &kp AT     &kp POUND             &kp DLLR            &kp PRCNT    &kp CARET  &kp AMPS            &kp STAR              &kp LPAR   &kp RPAR
&kp KP_N1  &kp KP_N2  &mt LSHIFT KP_N3  &mt LGUI KP_N4  &kp KP_N5    &kp KP_N6  &mt LGUI KP_N7  &mt LSHIFT KP_N8  &kp KP_N9  &kp KP_N0
&kp LBRC   &kp RBRC   &kp MINUS             &kp EQUAL           &kp GRAVE    &kp TILDE  &kp U               &kp DQT               &kp BSLH   &kp PIPE
           &kp LBKT   &kp RBKT              &trans              &trans       &trans     &trans              &trans                &trans
            >;
        };

        NAV {
            bindings = <
&kp LG(LBKT)       &kp LG(RBKT)  &kp LC(LS(TAB))  &kp LC(TAB)    &trans           &kp LG(LEFT)   &kp LG(C_PP)  &kp K_MUTE     &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&mt LCTRL TAB      &kp LALT      &kp LSHIFT       &kp LGUI       &trans           &kp LG(RIGHT)  &kp LEFT      &kp DOWN       &kp UP             &kp RIGHT
&kp LG(LS(TAB))    &kp LG(TAB)   &kp LC(LEFT)     &kp LC(RIGHT)  &kp LA(LG(I))    &trans         &kp LA(LEFT)  &kp LA(RIGHT)  &kp LA(LS(LEFT))   &kp LA(LS(RIGHT))
                   &trans        &trans           &trans         &trans           &trans         &trans        &trans         &trans
            >;
        };
    };
};
